<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈菜鸡的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chenfm-outlook.github.io/"/>
  <updated>2017-08-22T06:36:05.612Z</updated>
  <id>https://chenfm-outlook.github.io/</id>
  
  <author>
    <name>就叫陈菜鸡吧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://chenfm-outlook.github.io/2017/08/17/amaze-summarize/"/>
    <id>https://chenfm-outlook.github.io/2017/08/17/amaze-summarize/</id>
    <published>2017-08-17T07:57:48.017Z</published>
    <updated>2017-08-22T06:36:05.612Z</updated>
    
    <content type="html"><![CDATA[<p>amaze ui还是很强大的，用的熟练的话工作效率是能有很大的提升，但是说实话，固定的样式是有点丑。</p>
<p>Amaze UI 中， 行 .am-g 的宽度被设置为 100%， 未限定最大宽度，会随着窗口自动缩放</p>
<pre><code>.am-g {
     margin: 0 auto;
      width: 100%;
}
</code></pre><p>网格布局会形成左右内边距，可以在行 .am-g 上添加 .am-g-collapse，移除列的内边距（padding）。</p>
<pre><code>[class*=&quot;am-u-&quot;] {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem;
  float: left;
  position: relative;
}
.am-g-collapse [class*=&quot;am-u-&quot;] {
  padding-left: 0;
  padding-right: 0;
}
</code></pre><p>注意：如果am-u-xx-n中不足12等分，则最后一个am-u-xx-n向右浮动。</p>
<pre><code>[class*=&quot;am-u-&quot;] + [class*=&quot;am-u-&quot;]:last-child {
      float: right;
}
</code></pre><p>因此，可以在最后一列加上.am-u-end使其左浮动</p>
<pre><code>[class*=&quot;am-u-&quot;] + [class*=&quot;am-u-&quot;]:last-child {
      float: right;
}
</code></pre><p>列边距啪啪啪，添加 am-u-sm-offset-<em>、am-u-sm-offset-</em>、am-u-lg-offset-<em> 设置列的左边距。am-u-sm-push-</em>则相反</p>
<pre><code>.am-u-sm-offset-1 {
     margin-left: 8.33333333%;
  }
.am-u-sm-push-11 {
     left: 91.66666667%;
}
</code></pre><p>单独使用.am-container形成容器，会产生左右内边距，注意：在手机端(&lt;641px)为1rem</p>
<pre><code>.am-container {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
  width: 100%;
  max-width: 1000px;
}
@media only screen and (min-width:641px) {
  .am-container {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }
}
</code></pre><p>总结：Amaze UI使用通过am-g或与am-container形成不带最大宽度和带最大宽度为1000px的行布局，列布局则通过am-u-xx-n自定义布局</p>
<pre><code>带最大宽度为1000px的行布局，可在行 .am-g 上添加 .am-g-collapse，    移除.am-container的内边距
&lt;div class=&quot;am-container&quot;&gt;
    &lt;div class=&quot;am-g&quot;&gt;
        &lt;am-u-xx-n&gt;&lt;/am-u-xx-n&gt; //自定义
    &lt;/div&gt;
&lt;/div&gt;

满屏铺满的行布局，已取消内边距。在行 .am-g 上添加 .am-g-collapse，移除列的内边距（padding）。
&lt;div class=&quot;am-g am-g-collapse&quot;&gt;
    &lt;am-u-xx-n&gt;&lt;/am-u-xx-n&gt; //自定义
&lt;/div&gt;
</code></pre><p>浮动相关</p>
<blockquote>
<p>am-fl 左浮动  .am-fr 右浮动  .am-center 水平居中  .am-cf 清除浮动</p>
</blockquote>
<p>.am-align-xx浮动,与普通的左浮动右浮动相比较差不多，只不过是将浮动的元素加了自身浮动相反的外边距和底部边距</p>
<pre><code>[class*=&apos;am-align-&apos;] {
  margin-bottom: 1rem;
}
.am-align-left {
  margin-right: 1rem;
  float: left;
}
.am-align-right {
  margin-left: 1rem;
  float: right;
}
</code></pre><p>Amaze UI尺寸定于</p>
<blockquote>
<p>-xs最小 -sm小 -default中等 -lg大 -xl超大</p>
</blockquote>
<pre><code>am-text-{size} 文字大小
am-btn-{size} 按钮大小
am-input-{size} 输入框文字大小，个人理解行高。只支持sm和lg(2.6版本)
am-icon-sm 放大150%
am-icon-md 放大 200% (不写默认)
am-icon-lg 放大 250%
</code></pre><p>Amaze UI定义了几个常见的颜色</p>
<blockquote>
<p>default-默认；primary-蓝色；secondary-浅蓝色；success-绿色；warning-橙色；danger-红色；link-透明</p>
</blockquote>
<pre><code>am-text-{color} 设置文字颜色
am-btn-{color} 按钮设置颜色
</code></pre><p>通过上面的尺寸、颜色就能很快的定义一个amaze ui的button，例如</p>
<pre><code>&lt;button type=&quot;button&quot; class=&quot;am-btn am-btn-default am-radius&quot;&gt;默认样式&lt;/button&gt;
</code></pre><p>在按钮样式的基础上添加 .am-btn class表明这是amaze ui按钮，添加.am-btn-{color}设置颜色；添加.am-btn-{size}设置大小，不写默认；添加.am-radius创建圆角按钮。</p>
<p>块级按钮，添加 .am-btn-block class。</p>
<pre><code>.am-btn-block {
  display: block;
  width: 100%;
  padding-left: 0;
  padding-right: 0;
}
</code></pre><p>源码可见：button为块级元素，取消内边距，宽度100%，铺满整个div。</p>
<p>带有Icon图标的按钮</p>
<pre><code>&lt;button class=&quot;am-btn am-btn-default&quot;&gt;
  &lt;i class=&quot;am-icon-cog&quot;&gt;&lt;/i&gt;
  设置
&lt;/button&gt;
</code></pre><p>跟本身的按钮使用方式是一模一样的，通过在内部加i标签，形成icon图标。</p>
<p>注意：button按钮点击会产生border，假如用了link样式就出现白底蓝边，用a标签可以解决</p>
<p>button JS交互 loading状态</p>
<pre><code>&lt;button type=&quot;button&quot; class=&quot;am-btn am-btn-primary btn-loading-example&quot; 
    data-am-loading=&quot;{spinner: &apos;circle-o-notch&apos;, loadingText: &apos;加载中...&apos;, resetText: &apos;加载过了&apos;}&quot;&gt;
    按钮 - button 元素
&lt;/button&gt;

spinner 加载动画图标，适用于支持 CSS3 动画、非 input 元素，写图标名称即可
loadingText 加载时显示的文字， 默认为 loading
resetText 重置以后的显示的文字，默认为原来的内容
</code></pre><p>js调用</p>
<pre><code>$(&apos;.btn-loading-example&apos;).click(function () {
      var $btn = $(this)
      $btn.button(&apos;loading&apos;);//loading状态    
    $btn.button(&apos;reset&apos;);//复原
});
</code></pre><p>Amaze UI内外边距辅助类</p>
<p>Amaze UI在设计中，horizontal表示水平方向；scrollable表示垂直方向。</p>
<p>水平滚动：内容超出容器宽度时显示水平滚动条</p>
<blockquote>
<p>am-scrollable-horizontal</p>
</blockquote>
<p>垂直滚动: 内容超过设置的高度以后显示滚动条，默认设置的高度为 240px</p>
<blockquote>
<p>am-scrollable -vertical</p>
</blockquote>
<p>四周外边距：</p>
<pre><code>.am-margin
.am-margin-{size}
</code></pre><p>水平方向外边距：</p>
<pre><code>.am-margin-horizontal
.am-margin-horizontal-{size}
</code></pre><p>垂直方向外边距：</p>
<pre><code>.am-margin-vertical
.am-margin-vertical-{size}
</code></pre><p>左外边距：</p>
<pre><code>.am-margin-left
.am-margin-left-{size}
</code></pre><p>其padding同理可得</p>
<p>Amaze UI给img定义了一些简单的样式，去掉图片原本的边框线，所以img元素中展示的其本身大小，可以通过.am-img-responsive满屏撑满</p>
<pre><code>.am-img-responsive {
    display: block;
    max-width: 100%;
    height: auto;
}
</code></pre><p>也可以通过.am-img-thumbnail添加边宽线</p>
<p>在Amaze UI使用表单时，需要在容器上添加 .am-form class，容器里的子元素才会应用 Amaze UI 定义的样式。</p>
<p>表单水平排列。在form表单中添加 .am-form-horizontal class 并结合网格系统使用</p>
<pre><code>&lt;form class=&quot;am-form am-form-horizontal&quot;&gt;
      &lt;div class=&quot;am-form-group&quot;&gt;
        &lt;label for=&quot;doc-ipt-3&quot; class=&quot;am-u-sm-2 am-form-label&quot;&gt;电子邮件&lt;/label&gt;
        &lt;div class=&quot;am-u-sm-10&quot;&gt;
              &lt;input type=&quot;email&quot; id=&quot;doc-ipt-3&quot; placeholder=&quot;输入你的电子邮件&quot;&gt;
        &lt;/div&gt;
      &lt;/div&gt;
&lt;/form&gt;
</code></pre><p>简答的来说，am-form-group中的元素会一行内排列</p>
<p>行内排列，在外围容器上添加 .am-form-inline。 注意： 行内排列的元素并没有设置右边距，默认使用 inline-block 元素的间距，压缩 HTML 后行内表单元素的右边距会消失，需要自行处理。</p>
<pre><code>&lt;form class=&quot;am-form-inline&quot; role=&quot;form&quot;&gt;
    &lt;div class=&quot;am-form-group&quot;&gt;
        &lt;input type=&quot;email&quot; class=&quot;am-form-field&quot; placeholder=&quot;电子邮件&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;am-form-group&quot;&gt;
        &lt;input type=&quot;password&quot; class=&quot;am-form-field&quot; placeholder=&quot;密码&quot;&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre><p>简答的来说，am-form-group中的元素会从左往右进行排列</p>
<p>建议所有的input框全部放在am-form中，因为amaze ui已经帮我们封装好了。</p>
<pre><code>.am-form select,
.am-form textarea,
.am-form input[type=&quot;text&quot;],
.am-form input[type=&quot;password&quot;],
.am-form input[type=&quot;datetime&quot;],
.am-form input[type=&quot;datetime-local&quot;],
.am-form input[type=&quot;date&quot;],
.am-form input[type=&quot;month&quot;],
.am-form input[type=&quot;time&quot;],
.am-form input[type=&quot;week&quot;],
.am-form input[type=&quot;number&quot;],
.am-form input[type=&quot;email&quot;],
.am-form input[type=&quot;url&quot;],
.am-form input[type=&quot;search&quot;],
.am-form input[type=&quot;tel&quot;],
.am-form input[type=&quot;color&quot;],
.am-form-field {
  display: block;
  width: 100%;
  padding: 0.5em;
  font-size: 1.6rem;
  line-height: 1.2;
  color: #555555;
  vertical-align: middle;
  background-color: #ffffff;
  background-image: none;
  border: 1px solid #cccccc;
  border-radius: 0;
  -webkit-appearance: none;
  -webkit-transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;
          transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}
</code></pre><p>表格</p>
<p>Amaze UI通过给table添加.am-table设置基本样式；通过添加 .am-table-bordered 类生成边框线通过添加；通过添加 .am-table-radius 类生成外层圆角边宽；通过添加 .am-table-striped 类生成斑马线效果；通过添加 .am-table-hover 类生成hover 效果；</p>
<pre><code>&lt;table class=&quot;am-table am-table-bordered am-table-radius am-table-striped am-table-hover&quot;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;网站名称&lt;/th&gt;
            &lt;th&gt;网址&lt;/th&gt;
            &lt;th&gt;创建时间&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Amaze UI&lt;/td&gt;
            &lt;td&gt;http://amazeui.org&lt;/td&gt;
            &lt;td&gt;2012-10-01&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre><p>模拟弹窗</p>
<p>下面就是Amaze UI一个常见的弹窗，官方文档中.am-modal后面还跟了.am-modal-alert或.am-modal-confirm,经过个人研究得出，没有实际用处，只是语义化而已。</p>
<pre><code>//模拟弹窗开关
&lt;button type=&quot;button&quot; id=&apos;btn&apos;&gt;&lt;/button&gt;

//模拟弹窗
&lt;div class=&quot;am-modal&quot; tabindex=&quot;-1&quot; id=&quot;modal&quot;&gt;
  &lt;div class=&quot;am-modal-dialog&quot;&gt;
    &lt;div class=&quot;am-modal-hd&quot;&gt;//模拟弹窗头部
          &lt;a href=&quot;javascript: void(0)&quot; class=&quot;am-close am-close-spin&quot; data-am-modal-close&gt;&amp;times;&lt;/a&gt;
        //a标签表示可以关闭当前弹窗的按钮
    &lt;/div&gt;
    &lt;div class=&quot;am-modal-bd&quot;&gt;
          //模拟弹窗内容区
    &lt;/div&gt;
    &lt;div class=&quot;am-modal-footer&quot;&gt;
        //模拟弹窗底部，底部一般放按钮，在一行等比例显示
        &lt;span class=&quot;am-modal-btn&quot; data-am-modal-cancel&gt;取消&lt;/span&gt;
          &lt;span class=&quot;am-modal-btn&quot; data-am-modal-confirm&gt;提交&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

//js调用，通过按钮点击事件触发

$(&apos;#btn&apos;).onclick = function(){
    $(&apos;#model&apos;).modal({
        width: number    //可不写，
        height: number //可不写，
        onConfirm:function(options){
            //对应点击事件 &lt;span class=&quot;am-modal-btn&quot; data-am-modal-confirm&gt;提交&lt;/span&gt;
        }
        onCancel:function(options){
            //对应点击事件 &lt;span class=&quot;am-modal-btn&quot; data-am-modal-cancel&gt;取消&lt;/span&gt;
        }
    })
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;amaze ui还是很强大的，用的熟练的话工作效率是能有很大的提升，但是说实话，固定的样式是有点丑。&lt;/p&gt;
&lt;p&gt;Amaze UI 中， 行 .am-g 的宽度被设置为 100%， 未限定最大宽度，会随着窗口自动缩放&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.am-g {
    
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular2-bootstrap</title>
    <link href="https://chenfm-outlook.github.io/2017/08/02/angular2-bootstrap/"/>
    <id>https://chenfm-outlook.github.io/2017/08/02/angular2-bootstrap/</id>
    <published>2017-08-02T03:44:49.000Z</published>
    <updated>2017-08-02T06:21:26.849Z</updated>
    
    <content type="html"><![CDATA[<p>angular2引入ng-bootstrap</p>
<p>ng-bootstrap 使用 bootstrap 4.0 alpha2 ， 因此需要先下载 bootstrap ， 推荐使用 npm 包的形式</p>
<blockquote>
<p>npm install bootstrap@4.0.0-alpha.2 –save</p>
</blockquote>
<p>接着下载 ng-bootstrap ， 同样使用 npm 包的形式</p>
<p>npm install @ng-bootstrap/ng-bootstrap –save</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;angular2引入ng-bootstrap&lt;/p&gt;
&lt;p&gt;ng-bootstrap 使用 bootstrap 4.0 alpha2 ， 因此需要先下载 bootstrap ， 推荐使用 npm 包的形式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install bo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular2-install</title>
    <link href="https://chenfm-outlook.github.io/2017/08/01/angular2-install/"/>
    <id>https://chenfm-outlook.github.io/2017/08/01/angular2-install/</id>
    <published>2017-08-01T09:06:10.000Z</published>
    <updated>2017-08-02T06:33:20.052Z</updated>
    
    <content type="html"><![CDATA[<pre><code>/**
 * 从github上下载angular2项目
 * npm install国内有可能出错，我反正报错了。改为cnpm install
 * 安装依赖
 */
git clone https://github.com/angular/quickstart.git quickstart
cd quickstart
npm install
</code></pre><blockquote>
<p>npm install   //ERR</p>
</blockquote>
<pre><code>npm ERR! sha1-/viqIjkh97QLu71MPtQwL2/QqBM= integrity checksum failed when using sha1: wanted sha1-/viqIjkh97QLu71MPtQwL2/QqBM= 
but got sha1-QC6Yy3j8txJhU5Qkszs8/6/o6Is=. (474949 bytes)
</code></pre><p>Windows删除不必要的文件</p>
<pre><code>for /f %i in (non-essential-files.txt) do del %i /F /S /Q
rd .git /s /q
rd e2e /s /q
</code></pre><p>最后本地启动anular2工程</p>
<blockquote>
<p>npm start</p>
</blockquote>
<p>quickstart/.editorconfig详解</p>
<pre><code>/**
 * EditorConfig帮助开发人员在不同的编辑器和IDE之间定义和维护一致的编码风格。
 * *  匹配除/之外的任意字符串 [*]表示所有
 * ** 匹配任意字符串
 * ?  匹配任意单个字符
 * [name]  匹配name字符
 * [!name] 匹配非name字符
 * {s1,s2,s3} 匹配任意给定的字符串(since 0.11.0)
 * @param root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。
 * @param indent_style: 设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs(4个space)。
 * @param indent_size: 缩进的宽度，即列数，整数。如果indent_style为tab，则此属性默认为tab_width。
 * @param tab_width: 设置tab的列数。默认是indent_size。
 * @param end_of_line： 换行符，lf、cr和crlf
 * @param charset： 编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。
 * @param trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符。
 * @param insert_final_newline: 设为true表明使文件以一个空白行结尾
 */
# http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true


[*.md]
max_line_length = 0
trim_trailing_whitespace = false

# Indentation override
#[lib/**.js]
#[{package.json,.travis.yml}]
#[**/**.js]
</code></pre><p>quickstart/bs-config.json 指定工程启动的根目录，例如这里是src</p>
<pre><code>{
  &quot;server&quot;: {
    &quot;baseDir&quot;: &quot;src&quot;,
    &quot;routes&quot;: {
      &quot;/node_modules&quot;: &quot;node_modules&quot;
    }
  }
}
</code></pre><p><a href="https://segmentfault.com/a/1190000008563619" target="_blank" rel="external">https://segmentfault.com/a/1190000008563619</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;/**
 * 从github上下载angular2项目
 * npm install国内有可能出错，我反正报错了。改为cnpm install
 * 安装依赖
 */
git clone https://github.com/angular/quicksta
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC-Shiro-ContextLoaderListene</title>
    <link href="https://chenfm-outlook.github.io/2017/08/01/ContextLoaderListene/"/>
    <id>https://chenfm-outlook.github.io/2017/08/01/ContextLoaderListene/</id>
    <published>2017-08-01T03:01:04.000Z</published>
    <updated>2017-08-01T03:33:17.145Z</updated>
    
    <content type="html"><![CDATA[<pre><code>/**
 * Web容器加载顺序ServletContext--context-param--listener--filter--servlet
 * context-param用来声明应用范围(整个WEB项目)内的上下文初始化参数。
 * @param param-name 设定上下文的参数名称。必须是唯一名称
 * @param param-value  设定的参数名称的值
 */
&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:application-context.xml&lt;/param-value&gt; 
&lt;/context-param&gt;

/**
 * 此监听器出用于主要为了解决java.beans.Introspector导致内存泄漏的问题 
 * 此监听器应该配置在web.xml中与Spring相关监听器中的第一个位置(也要在ContextLoaderListener的前面) 
 */
&lt;listener&gt;  
    &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;  
&lt;/listener&gt; 

/**
 * 实例化Spring容器
 * 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml
 */
&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;

/**
 * 配置Shiro过滤器,先让Shiro过滤系统接收到的请求
 * 这里filter-name必须对应applicationContext.xml中定义的&lt;bean id=&quot;shiroFilter&quot;/&gt;
 * 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤
 * 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的
 * @param param-value 该值缺省为false,表示生命周期由SpringApplicationContext管理 设置为true则表示由ServletContainer管理
 */
&lt;filter&gt;  
    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;  
    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;  
    &lt;init-param&gt;  
        &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;  
        &lt;param-value&gt;true&lt;/param-value&gt;  
    &lt;/init-param&gt;  
&lt;/filter&gt;  
&lt;filter-mapping&gt;  
    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;  
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  
&lt;/filter-mapping&gt; 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;/**
 * Web容器加载顺序ServletContext--context-param--listener--filter--servlet
 * context-param用来声明应用范围(整个WEB项目)内的上下文初始化参数。
 * @param p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pirated software</title>
    <link href="https://chenfm-outlook.github.io/2017/07/28/list/"/>
    <id>https://chenfm-outlook.github.io/2017/07/28/list/</id>
    <published>2017-07-28T09:42:39.000Z</published>
    <updated>2017-07-28T09:48:42.218Z</updated>
    
    <content type="html"><![CDATA[<p>Intellij IDEA 2017.1.5 x64破解码</p>
<blockquote>
<p><a href="http://idea.iteblog.com/key.php" target="_blank" rel="external">http://idea.iteblog.com/key.php</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Intellij IDEA 2017.1.5 x64破解码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://idea.iteblog.com/key.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://idea.it
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maven-web-xml</title>
    <link href="https://chenfm-outlook.github.io/2017/07/28/maven-web-xml/"/>
    <id>https://chenfm-outlook.github.io/2017/07/28/maven-web-xml/</id>
    <published>2017-07-28T01:37:09.000Z</published>
    <updated>2017-08-01T02:58:47.718Z</updated>
    
    <content type="html"><![CDATA[<p>首先，maven工程中的web.xml配置文件不是必须的。</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; //xml的版本号为1.0，字符编码为utf-8
    &lt;web-app version=&quot;2.5&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee 
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd http://java.sun.com/xml/ns/javaee &quot;&gt;
    /**
     * ContextLoaderListener加载内容
     * context-param用来声明应用范围(整个WEB项目)内的上下文初始化参数。
     * @param param-name 设定上下文的参数名称。必须是唯一名称
     * @param param-value  设定的参数名称的值
     */
    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:application-context.xml&lt;/param-value&gt; 
    &lt;/context-param&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;

    /**
     * DispatcherServlt加载内容
     * 
     */
    &lt;servlet&gt;
        &lt;servlet-name&gt;Spring MVC Dispatcher Servlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;/WEB-INF/servlet-context.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Spring MVC Dispatcher Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;


    //指定欢迎页面(个人理解这不是首页吗，欢迎页其实我一点都不欢迎你来访问)
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;  //javaweb项目默认index.html是首页
        ......
        //可设置多个页面，从上往下，依次查找，找到就显示，结束这次任务
        &lt;welcome-file&gt;user/index.html&lt;/welcome-file&gt;
        //可对不同的文件设置自身的首页
    &lt;/welcome-file-list&gt;

    //错误编码，跳转自定义页面
    &lt;error-page&gt;
        &lt;error-code&gt;404&lt;/error-code&gt;
        &lt;location&gt;/user/8888.html&lt;/location&gt;
    &lt;/error-page&gt;

    //抛异常
    &lt;error-page&gt;
        &lt;exception-type&gt;java.lang.Exception&lt;exception-type&gt;
        &lt;location&gt;/exception.html&lt;location&gt;
    &lt;/error-page&gt;

    //过滤器解决spring编码问题，只对post请求有效
    &lt;filter&gt;
        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;
        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;encoding&lt;/param-name&gt;
            &lt;param-value&gt;UTF-8&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;forceEncoding&lt;/param-name&gt;
            &lt;param-value&gt;true&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/filter&gt;
&lt;/web-app&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，maven工程中的web.xml配置文件不是必须的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; //xml的版本号为1.0，字符编码为utf-8
  
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android webview显示net::ERR_PROXY_CONNECTION_FAILED解决方案</title>
    <link href="https://chenfm-outlook.github.io/2017/07/26/andriod-webview/"/>
    <id>https://chenfm-outlook.github.io/2017/07/26/andriod-webview/</id>
    <published>2017-07-26T06:48:43.000Z</published>
    <updated>2017-07-26T06:50:38.425Z</updated>
    
    <content type="html"><![CDATA[<p>手机连接wife进行调试，webview报错，错误信息</p>
<pre><code>net::ERR_PROXY_CONNECTION_FAILED
</code></pre><p>只要将手机的wife代理关闭即可。是不是很简单啊？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手机连接wife进行调试，webview报错，错误信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net::ERR_PROXY_CONNECTION_FAILED
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只要将手机的wife代理关闭即可。是不是很简单啊？&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>win7下小菜鸡安装ionic1.x，呵呵哒辣</title>
    <link href="https://chenfm-outlook.github.io/2017/07/24/ionic-install/"/>
    <id>https://chenfm-outlook.github.io/2017/07/24/ionic-install/</id>
    <published>2017-07-24T06:31:18.000Z</published>
    <updated>2017-07-31T09:34:20.411Z</updated>
    
    <content type="html"><![CDATA[<p>本以为不就是装个ionic吗，应该是很简单，装到我后面我发现这真的是个笑话，沮麻烦，沮恶心，沮痛苦的…</p>
<p>尤其还没有完整的安装教程，错误也是千奇百怪，不记下来，等下次在安装，那不是第二次头皮发麻吗。</p>
<blockquote>
<p>ionic start yxsh blank –type=ionic1</p>
</blockquote>
<p>安装空白页面的ionic1.x，第一部就给我报错辣，怎么不去吃屎去，别说我，我去还不行吗，别给我报错了。</p>
<pre><code>Error:unable to verify the first certificate
</code></pre><p>原因：win7下还需要配置一个环境变量。系统环境变量中新建NODE_TLS_REJECT_UNAUTHORIZED，其值为0</p>
<pre><code>变量名：NODE_TLS_REJECT_UNAUTHORIZED
变量值：0（阿拉伯数字0）
</code></pre><blockquote>
<p>cd yxsh</p>
<p>ionic cordova platform add android</p>
</blockquote>
<p>注：在/platforms/android/res/values/包里面打开strings.xml 文件在resources 标签里面添加 </p>
<pre><code>tools:ignore=&quot;MissingTranslation&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;  
</code></pre><p>接下来的就是最恶心的环节，就是装装装，设设设，下下下…</p>
<blockquote>
<p>ionic build android</p>
</blockquote>
<p>这里我是报错辣</p>
<pre><code>Error:the platform command has been renamed.To find out more, run:

ionic cordova platform --help
</code></pre><p>由于ionic 3.x的版本ionic platform 命令已经重命名，所以照着它的提示敲。</p>
<pre><code>ionic cordova platform add android
</code></pre><p>其他类似错误就不一一解答，解决方法都是ionic cordova代替ionic</p>
<p>在这里，需要我们装jdk，apache-ant，android-sdk，gradle，以上这些东西都能百度得到，就不一一细讲辣。</p>
<p>android-sdk中的Android SDK Manager可以看看这篇博客 <a href="http://blog.csdn.net/xushuai0616/article/details/55802725" target="_blank" rel="external">http://blog.csdn.net/xushuai0616/article/details/55802725</a></p>
<p>Android SDK Manager Log报错</p>
<blockquote>
<p>Failed to fetch URL <a href="http://dl.google.com/android/repository/addons_list-2.xml" target="_blank" rel="external">http://dl.google.com/android/repository/addons_list-2.xml</a>, reason: Unknown Host HTTP Proxy server</p>
</blockquote>
<p>大牛的回答</p>
<pre><code>在Android SDK Manager Setting 窗口设置HTTP Proxy server和HTTP Proxy Port这个2个参数，

分别设置为： HTTP Proxy server：mirrors.neusoft.edu.cn HTTP Proxy Port：80 

然后把下面的Force ..hxxxxxxxxxxxxxxxxxx勾上
</code></pre><p>因为我是直接在真机上测试</p>
<blockquote>
<p>ionic cordova run android 代替 ionic cordova build android 和 ionic cordova emulate android</p>
</blockquote>
<p>在这里要说以下，build是生成apk，而在手机上测试需要将apk装到手机上，所以手机必须开启“你傻逼”的功能。而我的手机开启辣傻逼模式还是没有发现设备。</p>
<blockquote>
<p>adb devices</p>
</blockquote>
<pre><code>List of devices attached 
</code></pre><p>adb devices找不到设备?原来是我的电脑没有安装Android Device，然后在adb_usb.ini文件中写入VID数值，百度教程<a href="http://jingyan.baidu.com/article/ce09321b5b76642bff858f31.html" target="_blank" rel="external">http://jingyan.baidu.com/article/ce09321b5b76642bff858f31.html</a></p>
<p>这样，你的app就能在手机上调试辣。</p>
<blockquote>
<p>chrome://inspect/#devices</p>
</blockquote>
<p>手机usb连接，并且开启开发者模式，就能进入WebView调试界面，手机上打开app，在pc端就会显示如下：</p>
<pre><code>WebView in io.ionic.starter (33.0.0.0)
app名字 file://android_asset/www/index.htm
inspect
</code></pre><p>点击inspect就能进入调试。</p>
<pre><code>注：WebView调试只支持debug.apk调试，不支持已签名的apk
</code></pre><p>ionic修改app名字，只需要在项目根目录下的config.xml文件修改以下就可以辣</p>
<pre><code>&lt;name&gt;项目名称&lt;/name&gt;
</code></pre><p>ionic生成图标及其启动图片，\resources\android\icon是存放android图标的地方。在\resources文件夹中都放入icon.png（ionic图标是1024*1024，所以大家懂的）</p>
<blockquote>
<p>ionic cordova resources  –icon  </p>
</blockquote>
<p>会帮你自动生产各种大小的图片。</p>
<p>启动图片根图标的生成方式是一模一样的，系统自带的是2732*2732()</p>
<blockquote>
<p>ionic cordova resources  –splash</p>
</blockquote>
<p>一步到位</p>
<blockquote>
<p>ionic cordova resources</p>
</blockquote>
<p>注：这种生成的图片方式还是是裁剪，而不是等比例缩放，所以建议大家还是自己作图，如果有更好的方式可以给我分享</p>
<pre><code>1028784495@qq.com  
</code></pre><p>一般在C盘 Users/用户/.android包里面；找到debug.keystore查看keystore 详细信息获得别名 android 为 keystore 的默认密码 </p>
<pre><code>keytool -list -v -keystore debug.keystore -storepass android
</code></pre><p>在当前目录下生成 my-release-key.keystore 签名信息（validity 签名有效天数）</p>
<pre><code>keytool -genkey -v -keystore my-release-key.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 20000    
</code></pre><p>ionic App生成无签名apk</p>
<blockquote>
<p>cordova build android –release</p>
</blockquote>
<p>编译成功之后；会在platforms\android\build\outputs\apk包里面生成一个android-release-unsigned.apk文件  </p>
<p>将android-release-unsigned.apk文件移动至C:\Users.android的文件的根目录下(和my-release-key.keystore放在一起)</p>
<p>签名</p>
<pre><code>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore android-release-unsigned.apk androiddebugkey  
</code></pre><p>最后放上我借鉴的网址</p>
<p>ionic Deploying</p>
<pre><code>http://ionicframework.com/docs/intro/deploying/
</code></pre><p>IONIC 发布正式版本打包步骤 - dailuwen的专栏 - CSDN博客</p>
<pre><code>http://blog.csdn.net/dailuwen/article/details/53907735
</code></pre><p>签署您的应用 | Android Studio(有点小卡)</p>
<pre><code>https://developer.android.com/studio/publish/app-signing.html#setup
</code></pre><p>Mac安装ionic</p>
<blockquote>
<p>sudo npm install -g cordova ionic</p>
</blockquote>
<p>第一部就报了一个很常见的错误，无法验证的签名。</p>
<pre><code>code UNABLE_TO_VERIFY_LEAF_SIGNATURE
</code></pre><p>这里只需关闭代理即可</p>
<pre><code>npm config set strict-ssl false
</code></pre><p>开启代理</p>
<pre><code>npm config set strict-ssl true
</code></pre><p>但是麻花的事情是，这货关闭了代理也不行，回想当初win7也报了个错误，它的解决方法是新建一个环境变量，将其的值赋值为”0”</p>
<pre><code>vi .bash_profile

export NODE_TLS_REJECT_UNAUTHORIZED=0
</code></pre><p>最可恨的还是不行，见鬼辣，最后是换辣镜像文件就可以辣</p>
<blockquote>
<p>npm config set registry <a href="http://registry.cnpmjs.org/" target="_blank" rel="external">http://registry.cnpmjs.org/</a></p>
<p>npm config set registry <a href="http://registry.npm.taobao.org/" target="_blank" rel="external">http://registry.npm.taobao.org/</a></p>
</blockquote>
<p>另外，mac开发ionic时，需要安装Xcode,接着配置Xcode，</p>
<ol>
<li>Open Xcode preferences (Xcode &gt; Preferences…)</li>
<li>Click the ‘Accounts’ tab</li>
<li>Login with your Apple ID (+ &gt; Add Apple ID…)</li>
</ol>
<blockquote>
<p>appid is not on any development teams</p>
</blockquote>
<p>解决方法，删除appid，再重新登下appid就可以了。</p>
<p>接着：</p>
<pre><code>&gt;ionic cordova build ios
</code></pre><p>中途报了个错误，如下：</p>
<pre><code>xcode-seect:error:tool &apos;xcodebuild&apos; requires Xcode,but active developer directory &apos;/Library/Developer/CommandLineTools&apos; is a command line tools instance
</code></pre><p>解决措施，重新定义一下xcode的路径，例如我的</p>
<blockquote>
<p>sudo xcode-select –switch /Applications/Xcode.app</p>
</blockquote>
<p>mac ionic真机调试还需要装iOS-deploy，iOS-deploy是一个使用命令行安装ios app到连接的设备的工具，原理是根据os x命令行工程调用系统底层函数，获取连接的设备、查询/安装/卸载app。</p>
<blockquote>
<p>npm install -g ios-deploy</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本以为不就是装个ionic吗，应该是很简单，装到我后面我发现这真的是个笑话，沮麻烦，沮恶心，沮痛苦的…&lt;/p&gt;
&lt;p&gt;尤其还没有完整的安装教程，错误也是千奇百怪，不记下来，等下次在安装，那不是第二次头皮发麻吗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ionic start
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring mvc 流程简单介绍</title>
    <link href="https://chenfm-outlook.github.io/2017/07/19/spring-mvc-process/"/>
    <id>https://chenfm-outlook.github.io/2017/07/19/spring-mvc-process/</id>
    <published>2017-07-19T09:33:33.000Z</published>
    <updated>2017-07-19T09:51:31.482Z</updated>
    
    <content type="html"><![CDATA[<p>http发送请求，action层(类)接收请求，在这层主要实现具体的方法和处理请求，是管理业务(service)调度和管理跳转的。</p>
<p>服务层server，xxxSV.java声明一个方法，xxxSVImpl.java实现这个方法。</p>
<p>dao层只完成CRUD,但是无论多么复杂的查询，dao层只是封装，至于CRUD如何去实现一个功能，dao层是不管的。</p>
<p>Action像是服务员，顾客点什么菜，菜上给几号桌，都是ta的职责；Service是厨师，action送来的菜单上的菜全是ta做的；Dao是厨房的小工，和原材料打交道的事情全是ta管。相互关系是，小工(dao)的工作是要满足厨师(service)的要求，厨师要满足服务员(action)转达的客户（页面用户）的要求，服务员自然就是为客户服务喽。</p>
<blockquote>
<p>xm文件删除，dao层及其新增的CRUD语句复制，其他自动追加。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http发送请求，action层(类)接收请求，在这层主要实现具体的方法和处理请求，是管理业务(service)调度和管理跳转的。&lt;/p&gt;
&lt;p&gt;服务层server，xxxSV.java声明一个方法，xxxSVImpl.java实现这个方法。&lt;/p&gt;
&lt;p&gt;dao层只完成C
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java-file-upload</title>
    <link href="https://chenfm-outlook.github.io/2017/07/19/java-file-upload/"/>
    <id>https://chenfm-outlook.github.io/2017/07/19/java-file-upload/</id>
    <published>2017-07-19T08:23:53.000Z</published>
    <updated>2017-07-19T08:49:24.641Z</updated>
    
    <content type="html"><![CDATA[<p>代码微微有点长，java部分就自己犯下的错误记录以下，代码就不贴辣，我放在来我的github上，有需要的可以自己去看看（其实写的炒鸡辣鸡）<a href="https://github.com/chenfm-outlook/java-file-upload" target="_blank" rel="external">https://github.com/chenfm-outlook/java-file-upload</a></p>
<p>前端部分</p>
<p>由于我用的是原生file控件，样式是很丑的，所以我就用大众的方法，将其隐藏掉，通过点击button的方式去触发file。</p>
<pre><code>$scope.submit = function(){
    $(&apos;#file&apos;).trigger(&apos;click&apos;);
    //当按钮点击时，触发file控件的点击事件
}
</code></pre><p>取消file的确定事件(长得丑就别出来)</p>
<pre><code>$(&apos;input[type=&quot;file&quot;]&apos;).on(&apos;change&apos;,doUpload);
function doUpload(){
     var data = (new FormData($(&apos;#form&apos;)[0]));
     $.ajax({
       url:&apos;/AppFileUploadAction/fileUpload.do&apos;,
       type:&apos;post&apos;,
       data: new FormData($(&apos;#form&apos;)),
       ……
    })
}
</code></pre><p>值得注意的是data属性别忘记加上去，要吃亏的。</p>
<blockquote>
<p>data: new FormData($(‘#form’))</p>
</blockquote>
<p>最最麻花的东西就要出现辣，恶心辣我一下午。</p>
<pre><code>&lt;form method=&quot;post&quot; id=&quot;form&quot; enctype=&quot;multipart/form-data&quot; style=&quot;display: none&quot;&gt;
    &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot;&gt;
&lt;/form&gt;
</code></pre><p>主要我菜，一开始没加name=”file”这个属性，图片上传功能死活不工作，真的是麻花，换辣N种方法，发现还是不对(内心是痛苦的)</p>
<blockquote>
<p>name=”file”  </p>
</blockquote>
<p>所以说，名字很重要，真TMD的重要。</p>
<p>java部分</p>
<p>为了项目的结构好看，我将图片的路径按当前时间(yy-mm-dd)创建文件夹</p>
<pre><code>File file =new File(path);
if(!file .exists()  &amp;&amp; !file .isDirectory()){
    System.out.println(&quot;//不存在&quot;);
    file .mkdir();
}else{
    System.out.println(&quot;//目录存在&quot;);
}
</code></pre><p>获取当前项目根目录</p>
<blockquote>
<p>String webBase = req.getSession().getServletContext().getRealPath(“/“);  //获取项目根目录</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码微微有点长，java部分就自己犯下的错误记录以下，代码就不贴辣，我放在来我的github上，有需要的可以自己去看看（其实写的炒鸡辣鸡）&lt;a href=&quot;https://github.com/chenfm-outlook/java-file-upload&quot; target=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>非指令命令下调用ueditor，angular报错</title>
    <link href="https://chenfm-outlook.github.io/2017/07/18/angular-ueditor/"/>
    <id>https://chenfm-outlook.github.io/2017/07/18/angular-ueditor/</id>
    <published>2017-07-18T06:36:19.000Z</published>
    <updated>2017-07-18T07:55:06.512Z</updated>
    
    <content type="html"><![CDATA[<p>非angular指令下引入百度ueditor，路由切换之后，就会报错。例如:</p>
<pre><code>TyepError:Cannot read property &apos;getSelection&apos; of undefined
at dom.Range.Range.select (ueditor.all.js:5746)
at dom.Range.setCursor (ueditor.all.js:5301
at UE.Editor.execCommand (ueditor.all.js:13736)
at UE.Editor._callCmdFn (ueditor.all.js:7587)
at UE.Editor.execCommand (ueditor.all.js:7615)
at UE.Editor.me.execCommand (ueditor.all.js:20578)
at m.$scope.addNews (cms-controller.js:181)
at cms-controller.js:246
at angular.min.js:91
at angular.min.js:123
</code></pre><p>现在就使用我们的大杀器。</p>
<pre><code>$scope.$on(&apos;$destroy&apos;, function() {
     ue.destroy();
});
</code></pre><p>通过广播的方法，在路由切换的过程中，将ueditor销毁掉。懒人就有懒人解决的方法，不知道这个方法好不好，但是目的是达到辣。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非angular指令下引入百度ueditor，路由切换之后，就会报错。例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TyepError:Cannot read property &amp;apos;getSelection&amp;apos; of undefined
at dom.Range.R
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>本是同根生，相煎何太急！ajax跨域请求</title>
    <link href="https://chenfm-outlook.github.io/2017/07/17/ajax-cross-domain/"/>
    <id>https://chenfm-outlook.github.io/2017/07/17/ajax-cross-domain/</id>
    <published>2017-07-17T09:20:31.000Z</published>
    <updated>2017-07-19T06:11:01.608Z</updated>
    
    <content type="html"><![CDATA[<p>什么是跨域，简单点来说，你可以在自己家里进进出出，但是到别人家里就不行了。你的征得主人的意见才行。</p>
<p>vampires are invited into the house</p>
<h2 id="spring-mvc-mybatis"><a href="#spring-mvc-mybatis" class="headerlink" title="spring mvc mybatis"></a>spring mvc mybatis</h2><p>spring MVC mybatis解决Ajax跨域请求，我是忍住不笑了。jsonp，代理，h5…都是弱爆了。</p>
<p>废话不多说，上代码</p>
<blockquote>
<p>@CrossOrigin()</p>
</blockquote>
<p>没错，就是这么的垃圾。一个注解完成所有的需求。但是它的唯一缺陷就是spring mvc需要4.2.5以上。</p>
<pre><code>&lt;properties&gt;
    &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;
    &lt;spring-mybatis.version&gt;1.1.1&lt;/spring-mybatis.version&gt;
    &lt;shiro.version&gt;1.2.3&lt;/shiro.version&gt;
    &lt;mybatis-spring&gt;1.1.1&lt;/mybatis-spring&gt;
    &lt;mybatis-paginator&gt;1.2.7&lt;/mybatis-paginator&gt;
&lt;/properties&gt;
</code></pre><h2 id="Access-control-Allow-Origin"><a href="#Access-control-Allow-Origin" class="headerlink" title="Access-control-Allow-Origin"></a>Access-control-Allow-Origin</h2><p>后台通过response.setHeader()的方式实现跨域请求，前端$.ajax()的方法设置请求头恕我才疏学浅，还没研究出来。有会的人请联系我。</p>
<blockquote>
<p>邮箱:1028784495@qq.com，QQ加我也没事情。</p>
</blockquote>
<p>java后端代码</p>
<pre><code>public Map&lt;String,Object&gt; getArticleById(Integer isid , HttpServletResponse response){
    Map&lt;String,Object&gt; resultMap = new HashMap&lt;String, Object&gt;();
    try{
        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);// 指定允许其他域名访问 * 表示所有
        //response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With,content-type,token&quot;); 响应类型  
        //response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH&quot;); 响应头设置  
    ……
</code></pre><p>$.ajax前端代码</p>
<blockquote>
<p>url:’<a href="http://localhost:3333/AppCmsArticleAction/getArticleByPage.do?isid=0" target="_blank" rel="external">http://localhost:3333/AppCmsArticleAction/getArticleByPage.do?isid=0</a>‘,</p>
</blockquote>
<p>尤其得注意url中的http：//别忘记加辣，一开始本菜鸡没加，后台都请求不过去，还以为是跨域请求写错辣，其实是你的url写错辣。</p>
<pre><code>$.ajax({
    url:&apos;http://localhost:3333/AppCmsArticleAction/getArticleByPage.do?isid=0&apos;,
    type:&apos;get&apos;,
    success:function(){}
    ……
})
</code></pre><p>由于这是H5，所以不支持IE8,但是这年头大家都开始不care辣。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是跨域，简单点来说，你可以在自己家里进进出出，但是到别人家里就不行了。你的征得主人的意见才行。&lt;/p&gt;
&lt;p&gt;vampires are invited into the house&lt;/p&gt;
&lt;h2 id=&quot;spring-mvc-mybatis&quot;&gt;&lt;a href=&quot;#sp
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不知道你是从哪捡来的自信看我的博客</title>
    <link href="https://chenfm-outlook.github.io/2017/07/15/index/"/>
    <id>https://chenfm-outlook.github.io/2017/07/15/index/</id>
    <published>2017-07-15T05:38:39.852Z</published>
    <updated>2017-07-17T06:44:09.826Z</updated>
    
    <content type="html"><![CDATA[<p>看在你这么丑的份上，就当你是对的吧~~~智障？我改如何存在，今天的笔没装完，谁都不许睡觉。</p>
<p>辣嘛凶干嘛？其实我是在寻找失散多年的儿子，特别爱说：23333   666666  6969696……</p>
<p>宛如一个智障</p>
<h2 id="Shuth-Up"><a href="#Shuth-Up" class="headerlink" title="Shuth Up"></a>Shuth Up</h2><p>无知草民闭嘴，还是老老实实的敲代码，乖乖的百度寻找答案。</p>
<p>民间高手 层出不穷</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看在你这么丑的份上，就当你是对的吧~~~智障？我改如何存在，今天的笔没装完，谁都不许睡觉。&lt;/p&gt;
&lt;p&gt;辣嘛凶干嘛？其实我是在寻找失散多年的儿子，特别爱说：23333   666666  6969696……&lt;/p&gt;
&lt;p&gt;宛如一个智障&lt;/p&gt;
&lt;h2 id=&quot;Shuth-
    
    </summary>
    
    
  </entry>
  
</feed>
